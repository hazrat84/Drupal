<?php

function b2b_categories_menu() {

  $items['ajax/getnodeCount/bycountry'] = array(
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'page callback' => 'getTermNodeCountByCountry',
  );

  $items['ajax/getterms/byvocabulary'] = array(
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'page callback' => 'getTermsByVocabulary',
  );

  return $items;
}

function getTermsByVocabulary(){
    $voc_id = (isset($_GET['voc_id']) ? $_GET['voc_id'] : '');
    
    $vocabulary = taxonomy_vocabulary_machine_name_load('Services');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $voc_id));
    //print_r($terms);exit;
    $term_arr = array();
    $index = 0;
    foreach($terms as $key => $term){
        global $language;
        i18n_string_translate_langcode( $language->language );
        
        $localized_term = i18n_taxonomy_localize_terms( taxonomy_term_load( $terms[$key]->tid ));
        $term_arr[$index]['tid'] = $terms[$key]->tid; 
        $term_arr[$index]['name'] = $localized_term->name; 
        $index++;
    }
    
    echo json_encode($term_arr);
}

function b2b_categories_views_pre_render(&$view) {
  global $user;
  //print_r($view->result);
  
  if($view->name == "employee_companies"){
    foreach ($view->result as $result) {
      // Replace all empty fields with the dash '-' character.
      if (in_array('employee',$user->roles)) {
        $view->field['nothing']->options['alter']['text'] = '<a href="/profile-view/'.$result->profile_uid.'">View Profile</a>';
      }
      //print_r($result);exit;
    }
  }

  /*if (!in_array('employee',$user->roles)) {
    unset($view->field['field_to_hide']);
  } */ 
}

function getTermNodeCountByCountry(){
    $country_value = (isset($_GET['country_value']) ? $_GET['country_value'] : '');
    $query = "SELECT taxonomy_vocabulary.name AS taxonomy_vocabulary_name, taxonomy_term_data.name AS taxonomy_term_data_name, taxonomy_term_data.vid AS taxonomy_term_data_vid, taxonomy_term_data.tid AS tid, taxonomy_vocabulary.machine_name AS taxonomy_vocabulary_machine_name, COUNT(DISTINCT node_taxonomy_index.nid) AS node_taxonomy_index_nid, taxonomy_vocabulary.vid AS vid
        FROM 
        {taxonomy_term_data} taxonomy_term_data
        LEFT JOIN {taxonomy_index} taxonomy_index ON taxonomy_term_data.tid = taxonomy_index.tid
        LEFT JOIN {node} node_taxonomy_index ON taxonomy_index.nid = node_taxonomy_index.nid
        LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
        GROUP BY taxonomy_vocabulary_name, taxonomy_term_data_name, taxonomy_term_data_vid, tid, taxonomy_vocabulary_machine_name";
    $result = db_query($query);
    $main_arr = array();
    $term_node_count_arr  = array();
    
    $country_nodes_arr = [];
    
    $get_country_records_qry = "SELECT entity_id FROM {field_data_field_country} WHERE field_country_value = '".$country_value."'";
    $ctry_result = db_query($get_country_records_qry);
    //$ctry_result = $ctry_result_qry->fetchAll();
    if($ctry_result->rowCount() > 0){
        foreach($ctry_result as $ctry_record){
            $country_nodes_arr[] = $ctry_record->entity_id;
        }
    }
    
    $country_nodes_str = implode(",",$country_nodes_arr);
    
    foreach ($result as $record) {
        if($country_value == 'All'){ // when no country is selected then give the original count
            
            $term_node_count_arr['term_id'] = $record->tid;
            $term_node_count_arr['node_count'] = $record->node_taxonomy_index_nid;
            $main_arr[] = $term_node_count_arr;

        }else{ // when a specific country is selected
            $get_term_node_count_qry = "SELECT COUNT(nid) as node_count FROM {taxonomy_index} WHERE nid IN (:country_nodes) and tid = (:tid)";
            $get_term_node_count = db_query($get_term_node_count_qry, array(":country_nodes" => $country_nodes_str, ":tid" => $record->tid))->fetchField();
            
            $term_node_count_arr['term_id'] = $record->tid;
            $term_node_count_arr['node_count'] = $get_term_node_count["node_count"];
            $main_arr[] = $term_node_count_arr;
	    $term_node_count_arr = '';
        }
    }
    $country_nodes_str = '';
    echo json_encode($main_arr);
}

/**
 * Implements hook_theme().
 */
/*function b2b_categories_theme($existing, $type, $theme, $path) {
    //$form['#theme_wrappers'][] = 'entity_form_find_partner';
  return array(
    'entity_form_wrapper' => array(
      'variables' => array('elements' => null),
      //'render element' => 'elements',
      'template' => 'entity-form-wrapper',
    ),
  );
}*/

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 
function b2b_categories_form_entityform_edit_form_alter(&$form, &$form_state) {
  $form['#theme_wrappers'][] = 'entity_form_wrapper';
}*/

/**
 *
 
function template_process_entity_form_wrapper(&$vars, $hook) {
  $vars['form'] = array(
    '#markup' => $vars['elements']['#children'],
  );
}*/


/**
 *
 
function template_preprocess_entity_form_wrapper(&$vars, $hook) {
  $entity =& $vars['elements']['#entity'];

  $vars['classes_array'][] = drupal_html_class('entityform-' . $entity->type);
}*/

function b2b_categories_form_alter(&$form, &$form_state, $form_id) {
    // To check that it is views filter form
 
    if($form['#id'] == 'views-exposed-form-user-home-header-search-page'){
        $options_arr = array(); //field_company_country_value

	$options_arr = $form['field_what_s_your_nationality_value']['#options'];
        
        foreach($options_arr as $key => $value) {
            if($key != 'DE' && $key != 'JP' && $key != 'TH' && $key != 'AE'){
                unset($options_arr[$key]);
            }
	      }
        $options_arr['All'] = t('- Any -');
        $form['field_what_s_your_nationality_value']['#options'] = $options_arr;
        $form['field_what_s_your_nationality_value']['#default_value'] = 'All';
        $form['field_what_s_your_nationality_value']['#validated'] = TRUE;
		
        $form_state['rebuild'] = TRUE;
    }
  if($form['#id'] == 'views-exposed-form-find-your-submission-page'){
      //print_r($form['field_what_are_you_looking_for__value']);
  }
  
  if($form['#id'] == 'profile2-edit-main-form'){ // edit profile form
      //print_r($form); 
      // Hide Extra Fields Markup from edit profile
      $form['profile_main']['field_create_company_profile']['#access'] = FALSE;
      $form['profile_main']['field_general_information']['#access'] = FALSE;
      $form['profile_main']['field_register_page_title']['#access'] = FALSE;
      $form['profile_main']['field_design_your_target']['#access'] = FALSE;
      
      $options_arr = array(); //
      $options_arr = $form['profile_main']['field_company_country']['und']['#options'];
      foreach($options_arr as $key => $value) {
            if($key != 'AE' && $key != 'OM' && $key != 'SA' && $key != 'BH' && $key != 'KW' && $key != 'QA'){
                unset($options_arr[$key]);
            }
	}
        
        $form['profile_main']['field_company_country']['und']['#options'] = $options_arr;
  }
  
  if ($form['#id'] == 'views-exposed-form-view-search-block-page') {
    $form['submit']['#value'] = t('Search');
    $form['combine']['#attributes']['placeholder'] = t('Name or Keyword');
    $form['#action'] = base_path().'search-result';
  }
  
  if($form['#id'] == 'views-exposed-form-user-home-header-search-page'){
      //$form['#info']['filter-combine']['#attributes']['placeholder'] = t($form['#info']['filter-combine']['label']);
      global $language;
      if($language->language == 'ar'){
          $form['#action'] = base_path().'ar/company-users';
      }else{
          $form['#action'] = base_path().'company-users';
      }
  }
  
  if ($form['#id'] == 'views-exposed-form-country-node-count-page') {
      unset($form['submit']);
  }
  
}

function b2b_categories_form_profile2_form_alter(&$form, &$form_state) {
  // Your alterations.
    //print_r($form);
    if($form['#id'] == 'user-register-form'){
        drupal_add_js(array('SA' => array('AjaxUrlgetTermsByVocabulary' => url('ajax/getterms/byvocabulary'))), 'setting'); // update
        drupal_add_js(drupal_get_path('module', 'b2b_categories') . '/b2bdirectory.js', array('scope' => 'footer'));
        unset($form['profile_main']['field_companies']['und']['#title']);
        unset($form['profile_main']['field_companies']['und']['#options']['_none']);
        unset($form['profile_main']['field_any_one']['und']['#options']['_none']);
        unset($form['profile_main']['field_sex']['und']['#options']['_none']);
        unset($form['profile_main']['title']);
        unset($form['account']['name']['description']);
        
        
        //$form['profile_main']['field_company_country']['und']['#validated'] = TRUE;
        //print_r($options_arr);
        //print_r($form['account']['mail']);
        $form['account']['mail']['#description'] = "";
        //$form['profile_main']['field_service']['#validated'] = TRUE;
        //$form_state['rebuild'] = TRUE;
        $form['#after_build'][] = 'b2bdirectory_after_build';
        
        //$form['actions']['submit']['#value'] = t('Save');
        
        /*$object = $form['profile_main']['field_companies']['und']['#entity'];
        $reflector = new \ReflectionClass($object); // To get object protected property
        $classProperty = $reflector->getProperty('entityInfo');
        $classProperty->setAccessible(true);
        $entityInfo = $classProperty->getValue($object);*/
        //echo $data['label'];
        
        /*$query = "SELECT taxonomy_term_data.name AS taxonomy_term_data_name, taxonomy_term_data.tid AS tid
        FROM 
        {taxonomy_term_data} taxonomy_term_data";
        $result = db_query($query);
        $term_node_count_arr  = array();
        foreach ($result as $record) {
            $term_node_count_arr[$record->tid] = $record->taxonomy_term_data_name;
        }
        
        $form['profile_main']['field_service']['und']['#options'] = $term_node_count_arr;*/
        //print_r($form['profile_main']['field_service']['und']['#options']);
        //$form['profile_main']['field_service']['und']['#options'] = $term_node_count_arr;
        
        
    }
}

function b2bdirectory_after_build($form, &$form_state){
   
    $form['#attached']['js'] = array(
        drupal_get_path('module', 'b2b_categories') . '/b2bdirectory.js',
    );
    return $form;
}

/**
 * Implements hook_block_info().
 */
function b2b_categories_block_info() {
  $blocks = array();
  $blocks['categories_tree_block'] = array(
    'info' => t('Categories Block Custom'),
  );
  $blocks['exhibition_vocabulary_block'] = array( // for showing left market
    'info' => t('Exhibition Vocabulary Block'),
  );
  $blocks['search_by_membership_block'] = array( // for showing membership radio buttons at the top of company users
    'info' => t('Membership Search (Radio) Block'),
  );
  $blocks['vocabulary_withimg_block'] = array( // for showing vocabulary with image on front page
    'info' => t('Vocabulary with Image Block'),
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function b2b_categories_block_view($delta=''){
  $block = array();

  switch($delta){
    case 'categories_tree_block':
      $block['content'] = categories_block_view();
    break;

    case 'exhibition_vocabulary_block':
      $block['content'] = vocabulary_block_view();
    break;

    case 'search_by_membership_block':
      $block['content'] = membership_block_view();
    break;
    
    case 'vocabulary_withimg_block':
      $block['content'] = vocabulary_withimg_block_view();
    break;
  }

  return $block;
}
/**
* Custom function for displaying categories hierarchy
* #return
*  returns a renderable array of block content.
*/
function categories_block_view(){
    drupal_add_js(array('SA' => array('AjaxUrlgetTermNodeCountByCountry' => url('ajax/getnodeCount/bycountry'))), 'setting'); // update
    drupal_add_js(drupal_get_path('module', 'b2b_categories') . '/b2bdirectory.js', array('scope' => 'footer'));
      $query = "SELECT taxonomy_vocabulary.name AS taxonomy_vocabulary_name, taxonomy_term_data.name AS taxonomy_term_data_name, taxonomy_term_data.vid AS taxonomy_term_data_vid, taxonomy_term_data.tid AS tid, taxonomy_vocabulary.machine_name AS taxonomy_vocabulary_machine_name, COUNT(DISTINCT node_taxonomy_index.nid) AS node_taxonomy_index_nid, taxonomy_vocabulary.vid AS vid
        FROM 
        {taxonomy_term_data} taxonomy_term_data
        LEFT JOIN {taxonomy_index} taxonomy_index ON taxonomy_term_data.tid = taxonomy_index.tid
        LEFT JOIN {node} node_taxonomy_index ON taxonomy_index.nid = node_taxonomy_index.nid
        LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
        GROUP BY taxonomy_vocabulary_name, taxonomy_term_data_name, taxonomy_term_data_vid, tid, taxonomy_vocabulary_machine_name";
      $result = db_query($query);

      $prev_voc_name = '';
      $voc_name = '';
      
      global $language;
      
      foreach ($result as $record) {
        i18n_string_translate_langcode( $language->language );

        $localized_term = i18n_taxonomy_localize_terms( taxonomy_term_load( $record->tid ));

        $translated_voc_name = i18n_string(array('taxonomy', 'vocabulary', $record->vid, 'name'), $record->taxonomy_vocabulary_name, array('langcode' => $language->language, 'sanitize' => FALSE));
        
        if($prev_voc_name == ''){
          $prev_voc_name = $translated_voc_name;
          $voc_name = '<h3>'.$translated_voc_name.'</h3>';
        }else if($prev_voc_name != $translated_voc_name){
          $voc_name = '<h3>'.$translated_voc_name.'</h3>';
        }

        $items[]= $voc_name.l(t($localized_term->name), "taxonomy/term/$record->tid") . ' (<span id="term_'.$record->tid.'">' . $record->node_taxonomy_index_nid . '</span>)';
        $prev_voc_name = $translated_voc_name;
        $voc_name = '';
      }

      return theme('item_list', array('items' => $items));

}

function vocabulary_block_view(){
    $query = "SELECT taxonomy_vocabulary.name AS taxonomy_vocabulary_name, taxonomy_vocabulary.vid AS vid
        FROM 
        {taxonomy_vocabulary} taxonomy_vocabulary";
      $result = db_query($query);
      
      global $language;
      
      $products_arr = array();
      $params = array();
      $params = drupal_get_query_parameters();
      $checked = '';
      $all_checked = '';
      if(empty($params)){
          $all_checked = 'checked';
      }
      $current_path = current_path();
      $all_arr = array();
      $filter_field_name = '';
      if($current_path == 'company-users' || $current_path == 'user-home-search'){
            $filter_field_name = 'field_market_target_id';
            
            if(isset($params) && !empty($params)){
                $count = 0;
                foreach($params as $key => $item){
                    if($key != 'field_market_target_id'){
                        $all_arr[$key] = $item;
                    }
                }
            }
      }else{
          $filter_field_name = 'field_exhibition_market_target_id';
          if(isset($params) && !empty($params)){
                $count = 0;
                foreach($params as $key => $item){
                    if($key != 'field_exhibition_market_target_id'){
                        $all_arr[$key] = $item;
                    }
                }
            }
      }
      if($language->language == 'ar'){
          $all_market = 'كل السوق';
      }else{
          $all_market = 'All Market';
      }
      //$items[]= "<input type='radio' name='voc_id' value='' ".$all_checked." /> ".l(t($all_market), "/".$current_path, array('query' => $all_arr));
      $items[]= l(t($all_market), "/".$current_path, array('query' => $all_arr));
      $products_arr = $params;
      foreach ($result as $record) {
        i18n_string_translate_langcode( $language->language );

        $translated_voc_name = i18n_string(array('taxonomy', 'vocabulary', $record->vid, 'name'), $record->taxonomy_vocabulary_name, array('langcode' => $language->language, 'sanitize' => FALSE));
            
        if(isset($products_arr) && !empty($products_arr)){
            if(isset($products_arr[$filter_field_name])){
                if($products_arr[$filter_field_name] == $record->vid){
                    $checked = 'checked';
                }else{
                    $checked = '';
                }
            }
        }
        
        if($current_path == 'company-users' || $current_path == 'user-home-search'){
            $params['field_market_target_id'] = $record->vid;
        }else{
            $params['field_exhibition_market_target_id'] = $record->vid;
        }
        
        //$items[]= "<input type='radio' name='voc_id' value='". $record->vid ."' ".$checked." /> ".l(t($translated_voc_name), "/".$current_path, array('query' => $params));
        $items[]= l(t($translated_voc_name), "/".$current_path, array('query' => $params));
        
      }

      return theme('item_list', array('items' => $items));
}

function membership_block_view(){
    $query = "SELECT ms_products_plans.pid AS pid, ms_products_plans.name AS ms_products_plans_name, ms_products_plans.sku AS ms_products_plans_sku
                FROM 
                {ms_products_plans} ms_products_plans
                WHERE (( (ms_products_plans.bundle IN  ('ms_membership')) ))
                LIMIT 6 OFFSET 0";
    $result = db_query($query);
    
    global $language;
    $products_arr = array();
    $products_arr_for_display = array();
    $products_arr_for_display = array("1" => "استئجار وكيل", "2" => "البحث عن شريك", "4" => "بيع الامتياز", "5" => "حضور المعرض");
    $params = array();
    $params = drupal_get_query_parameters();
    $checked = '';
    $all_checked = '';
    $all_class = '';
    if(empty($params)){
        $all_checked = 'checked';
        $all_class = 'makestrong';
    }
    $current_path = current_path();
    $all_arr = array();
    
    if(isset($params) && !empty($params)){
        $count = 0;
        foreach($params as $key => $item){
            if($key != 'ms_product'){
                $all_arr[$key] = $item;
            }
        }
    }
    
    if($language->language == 'ar'){
        $all = 'الكل';
    }else{
        $all = 'All';
    }
    
    //$items[]= "<input type='radio' name='mem_id' value='' ".$all_checked." /> ".l(t($all), "/".$current_path, array('query' => $all_arr));
    $items[]= l(t($all), "/".$current_path, array('query' => $all_arr, 'attributes' => array('class' => $all_class)));
    $param_count = 0;
    $products_arr = $params;
    foreach ($result as $record) {
        i18n_string_translate_langcode( $language->language );
        if(isset($products_arr) && !empty($products_arr)){
            if(isset($products_arr['ms_product'])){
                if($products_arr['ms_product'] == $record->ms_products_plans_sku){
                    $checked = 'checked';
                }else{
                    $checked = '';
                }   
            }
        }
        
        if($language->language == 'ar'){
          $record->ms_products_plans_name = $products_arr_for_display[$record->pid];
        }
        
        $params['ms_product'] = $record->ms_products_plans_sku;
        //$items[]= "<input type='radio' name='mem_id' value='". $record->pid ."' ".$checked." /> ".l(t($record->ms_products_plans_name), "/".$current_path, array('query' => $params));
        $items[]= l(t($record->ms_products_plans_name), "/".$current_path, array('query' => $params));
    }
    
    return theme('item_list', array('items' => $items));
}

function vocabulary_withimg_block_view(){
    $query = "SELECT taxonomy_vocabulary.name AS taxonomy_vocabulary_name, taxonomy_vocabulary.vid AS vid
        FROM 
        {taxonomy_vocabulary} taxonomy_vocabulary";
      $result = db_query($query);
      $img_arr = array("2" => "Clothing.png", "3" => "Tourism.png", "5" => "Finance.png", "6" => "Food.png", "7" => "Health.png",
                       "8" => "Vehicle.png", "9" => "Office.png", "10" => "Telecom.png", "11" => "Construction.png", "12" => "Energy.png"
          );
      $width_arr = array("2" => "100", "3" => "100", "5" => "98", "6" => "100", "7" => "87",
                       "8" => "108", "9" => "111", "10" => "112", "11" => "104", "12" => "106");
      $height_arr = array("2" => "95", "3" => "95", "5" => "95", "6" => "95", "7" => "88",
                       "8" => "95", "9" => "95", "10" => "95", "11" => "95", "12" => "95");
      global $language;
      $html_output = '';
      $counter = 0;
      $path = drupal_get_path('theme', 'responsive_bartik');
      $html_output .= "<div class='main_row'>";
      foreach ($result as $record) {
        i18n_string_translate_langcode( $language->language );
        if($counter == 0 || $counter == 5){
            //$html_output .= "<div class='main_row'>";
        }
        $counter++;
        $html_output .= "<div class='voc_main'>";
        $translated_voc_name = i18n_string(array('taxonomy', 'vocabulary', $record->vid, 'name'), $record->taxonomy_vocabulary_name, array('langcode' => $language->language, 'sanitize' => FALSE));
        $html_output .= "<a href='/company-users?combine=&field_company_country_value=All&field_market_target_id=".$record->vid."'>";
        $html_output .= "<div class='voc_img'><img src='/".$path.'/images/'.$img_arr[$record->vid]."' width='".$width_arr[$record->vid]."' height='".$height_arr[$record->vid]."' /></div>";
        $html_output .= "<div class='voc_name'>".$translated_voc_name."</div>";
        $html_output .= "</div>";
        $html_output .= "</a>";
        if($counter == 5){
            //$html_output .= "</div>";
        }
      }
      $html_output .= "</div>";
      return $html_output;
}

function b2b_categories_user_insert(&$edit, $account, $category) {
  // https://www.drupal.org/node/1152068
  //global $language;
  //$lang_code = $language->language; 
 
  /*if(isset($edit["field_company_name"][$lang_code][0])){
    $company_name = '';//$edit["field_company_name"][$lang_code][0]["value"];

    $node = new stdClass();
    // Set the values for the node
    $node->title = $company_name;
    $node->type = 'company';   // Your specified content type
    $node->language = $lang_code; // $lang_code is supplied to the function.
    $node->status = 1;       // To have published, else use 0
    $node->uid = $account->uid; // UID of content owner
    // Save the node.
    node_save($node);
  }*/
}

/**
 * Implements hook_profile2_insert().
 */
function b2b_categories_profile2_insert($profile) {
  // $account = user_load($profile->uid);
    global $language;
    $lang_code = $language->language; 
    $company_name = '';
    $company_name = $profile->field_company_name[$lang_code][0]['value'];
    $country_name = $profile->field_company_country['und'][0]['value'];
    
    if($country_name != ''){
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
        ->fieldCondition('field_account_country', 'value', $country_name);
        $result = $query->execute();
    }
        if(!empty($result)){
            $users_ids = array_keys($result['user']);
        }
        $to_emp = '';
        if(is_array($users_ids) && !empty($users_ids)){
            $uid =  $users_ids[0];
            $user_fields = user_load($uid);
            if(in_array("employee", $user_fields->roles)){
                 $to_emp = $user_fields->mail;
                 watchdog('new_user_registered', "To mail is ".$to_emp, array(), WATCHDOG_NOTICE);
            }
        }
        
        $message = "Hi,
            <br />
            <br />
            This is just a notification that a new company has been registered with the name $company_name, so please login and look in detail about the new company.
            <br /><br />
            Thanks";
        //str_replace("[your_name]",$username,$message);
        
        $params['to'] = $to_emp;
        $params['username'] = $company_name;
        $params['message'] = t($message);
        $params['subject'] = t("A New Company has been regiatered ".$company_name);
        $module = 'b2b_categories';
        $key = 'mail_on_new_user';
        $site_language = '';
        if($to_emp != ''){ 
           drupal_mail($module, $key, $to_emp, $site_language, $params, $from = NULL, $send = TRUE);
           watchdog('new_user_registered', "Custom mail sent on new User ", array(), WATCHDOG_NOTICE);
        }
    
        //watchdog('new_user_registered', "New User Created ".$type, array(), WATCHDOG_NOTICE);
}

/**
 * Implementation of hook_language_switch_links_alter().
 *
 * Retain query parameters; works around core bug, see https://www.drupal.org/node/854104
 */
function b2b_categories_language_switch_links_alter(&$links, $type, $path) {
  $params = drupal_get_query_parameters();
  foreach ($links as &$link) {
    $link['query'] = $params;
  }
}

/**
 * Impliments hook_form_views_exposed_form_alter
 *
 * Used to change exposed date filter to month only, as this is not available in the views UI
 */
function b2b_categories_form_views_exposed_form_alter(&$form, $form_state) {
  
    if( $form['#id'] == 'views-exposed-form-exhibition-page-page') {
        // Switch date formatter to month only
        //print_r($form);
        //$form['field_exhibition_market_target_id']['#access'] = FALSE;
        $form['field_event_date_value']['value']['#date_format'] = 'm';
        // Add extra validator to handle filter submit
        $form['#validate'][] = 'b2b_categories_views_exposed_form_validate';
  }
 
}
/**
 * Custom validator for exposed date filter
 */
function b2b_categories_views_exposed_form_validate(&$form, &$form_state) {
  $handlers = &$form_state['view']->filter;
  foreach ($handlers as $key => $handler) {
     //&& $form[$key]['value']['#type'] == 'date_select' && $form['#value']['#date_format'] == 'm'
      // && $form[$key]['value']['#type'] == 'date_text'
      //print_r($form[$key]);
    if (!empty($handler->options['exposed'])
     && isset($form[$key]['value']['#type']) 
     && $form[$key]['value']['#type'] == 'date_select'){
      $handler->options['granularity'] = 'month';
      $handler->format = 'm';
    }
  }
}

/**
* Implementation of hook_menu_alter
**/
function b2b_categories_menu_alter(&$items) {
  $items['user/register']['title'] = t('Create new Company User Account'); // change Create Account Tab Text
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function b2b_categories_translated_menu_link_alter(&$item, $map) {
    
  if ($item['menu_name'] == 'menu-top-menu') {
      //print_r($item);
    if ($item['mlid'] == 761) {
      $item['access'] = TRUE;
      if(user_is_logged_in()){
        global $user;
        $username = $user->name;
        $uid = $user->uid;
        
        //$item['title'] = 'TEST';//$username;
        $item['link_title'] = $username;
        $item['href'] = 'profile-main/'.$uid.'/edit';
        
      }else{
          $item['access'] = FALSE;  
      }
    }
    else {
      /*if(user_is_logged_in() && $item['mlid'] == 762){
        //$item['access'] = FALSE;  
        //$item['link_title'] = $username;
      }*/
    }
  }
  
  if($item['menu_name'] == 'user-menu'){
      if(user_is_logged_in()){
          global $user;
          $uid = $user->uid;
          if(!in_array("administrator", $user->roles)){
              if($item['mlid'] == '957'){
                  //$item['access'] = FALSE; 
              }
          }
          
          if($item['mlid'] == '963'){
             $item['href'] = 'profile-main/'.$uid.'/edit';
          }
      }
  }
  
    if($item['menu_name'] == 'menu-membership-menus'){
        if(user_is_logged_in()){
            global $user;
            $uid = $user->uid;
            //echo $item['href']." ";
            
        }
    }
}

function b2b_categories_user_login(&$edit, $account) {
  $edit['redirect'] = '/';
}

/**
 * Implements hook_views_query_alter().
 */
function b2b_categories_views_query_alter(&$view, &$query) {
  
    if ($view->name == 'company_users_new_' && $view->current_display == 'company_users_page') {
        // Write the join conditions
        
        $params = drupal_get_query_parameters();
        if(isset($params['ms_product'])){
            $membership_type = $params['ms_product'];//'hire_an_agent';
            
            /*$join = new views_join(); 
            $join->table = 'ms_order_products'; 
            $join->field = 'uid'; 
            $join->left_table = 'profile'; 
            $join->left_field = 'uid'; 
            $join->type = 'left'; 
            $query->add_relationship('ms_order_products', $join, 'profile'); 
            $query->add_table('ms_order_products');
            $query->add_where(1,'ms_order_products.id', $membership_type ,'=');*/
            $join = new views_join(); 
            $join->table = 'ms_products_purchases'; 
            $join->field = 'uid'; 
            $join->left_table = 'profile'; 
            $join->left_field = 'uid'; 
            $join->type = 'left'; 
            $query->add_relationship('ms_products_purchases', $join, 'profile'); 
            $query->add_table('ms_products_purchases');
            $query->add_where(1,'ms_products_purchases.sku', $membership_type ,'=');
        }
       
        //$query->add_table('ms_order_products');
        
        ////////////////////
        
        //$query->group_operator = 'OR';
        //$view->query->where[1]["type"] = "OR";
        ////////////////////
        
        /*$join = new views_join();
        $join->table = 'ms_order_products';
        $join->left_table = 'profile';// or wathever table you want to join with
        $join->field = 'uid';
        $join->left_field = 'uid';// or wathever column you want to join with
        $join->type = 'LEFT';// if you want another join type play with this value 
        // Do the actual join
        //$view->query->add_relationship('ms_order_products',$join,'profile');
        
        $query->table_queue['ms_op'] = array (
          'alias' => 'ms_op',// I believe this is optional
          'table' => 'ms_order_products',
          'relationship' => 'profile',
          'join' => $join,
        );
        //$query->add_table('ms_order_products');
        $query->where[] = array(
            'conditions' => array(
                array(
                  'field' => 'ms_op.id',
                  'value' => $membership_type,
                  'operator' => '=',
                ),
            // add more conditions if you want to
            ),
            //'type' => 'OR' ,// I believe this is an operator for multiple conditions
        );*/
        //print_r($view->query);
  }
  
  // submission listing
  if ($view->name == 'find_your_submission' && $view->current_display == 'page') {
      if(user_is_logged_in()){
          global $user;
          $country_id = 0;
          if(in_array("employee", $user->roles)){
              
              $user_fields = user_load($user->uid);
              
              if(isset($user_fields->field_account_country['und'])){
                $country_id = $user_fields->field_account_country['und'][0]['value'];
              }else{
                  $country_id = 0;
              }
              
                $join = new views_join(); 
                $join->table = 'field_data_field_what_s_your_country_'; 
                $join->field = 'entity_id'; 
                $join->left_table = 'entityform'; 
                $join->left_field = 'entityform_id'; 
                $join->type = 'left'; 
                $query->add_relationship('field_data_field_what_s_your_country_', $join, 'entityform'); 
                $query->add_table('field_data_field_what_s_your_country_');
                $query->add_where(1,'field_data_field_what_s_your_country_.field_what_s_your_country__value', array($country_id) ,'in');
            
            /*$query->where[] = array(
                'conditions' => array(
                    array(
                      'field' => 'field_data_field_what_s_your_country_.entity_type',
                      'value' => "'entityform'",
                      'operator' => '=',
                    ),
                // add more conditions if you want to
                ),
                'type' => 'AND' ,// I believe this is an operator for multiple conditions
            );*/
            
            //print_r($view->query);
               
          }
      }
  }
  
    if ($view->name == 'employee_companies' && $view->current_display == 'company_users_page') {
        if(user_is_logged_in()){
            global $user;
            $country_id = 0;
            if(in_array("employee", $user->roles)){
                
                $user_fields = user_load($user->uid);

                if(isset($user_fields->field_account_country['und'])){
                    $country_code = $user_fields->field_account_country['und'][0]['value'];
                }else{
                    $country_code = 0;
                }
                
                $join = new views_join(); 
                $join->table = 'field_data_field_company_country'; 
                $join->field = 'entity_id '; 
                $join->left_table = 'profile'; 
                $join->left_field = 'pid'; 
                $join->type = 'left'; 
                $query->add_relationship('field_data_field_company_country', $join, 'profile'); 
                $query->add_table('field_data_field_company_country');
                $query->add_where(1,'field_data_field_company_country.field_company_country_value', array($country_code) ,'in');
            }
        }
    }
  
}

function b2b_categories_mail_alter(&$message){
   /* print_r($message);
    switch($message['key']){
        case 'rules_action_mail_rules_send_mail_on_entity_submission_4':
          //find_your_partner
            // field_your_email
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'entityform')
                    ->entityCondition('bundle', 'find_your_partner')
                    ->fieldCondition('field_your_email_email', 'value', array($message['from']));
            $result = $query->execute();
            print_r($result);exit;
        break;

    }*/
}

function b2b_categories_entity_insert($entity, $type) {
    if ($type == 'entityform') {//print_r($entity);
        $country = '';
        $country = $entity->field_what_s_your_country_['en'][0]['value'];
        
        $from = $entity->field_your_email['und'][0]['email'];
        if($country != ''){
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'user')
            ->fieldCondition('field_account_country', 'value', $country);
            $result = $query->execute();
        }
        if(!empty($result)){
            $users_ids = array_keys($result['user']);
        }
        $to_emp = '';
        if(is_array($users_ids) && !empty($users_ids)){
            $uid =  $users_ids[0];
            $user_fields = user_load($uid);
            if(in_array("employee", $user_fields->roles)){
                 $to_emp = $user_fields->mail;
                 watchdog('Find_a_partner', "To mail is ".$to_emp, array(), WATCHDOG_NOTICE);
            }
        }
        
        $username = $entity->field_your_name['und'][0]['value'];
        
        //print_r($entity);exit;
        $message = "Hi admin,
            <br />
            <br />
            This is just a notification that a new submission has taken place by $username for Find a Partner, so please login and look in detail about the new submission.
            <br /><br />
            Thanks";
        //str_replace("[your_name]",$username,$message);
        /*$params = array('to' => $to_emp);
        $params = array('username' => $username);
        $params = array('message' => $message);
        $params = array('subject' => t("A New Submission of Find a Partner By ".$username));*/
        
        $params['to'] = $to_emp;
        $params['username'] = $username;
        $params['message'] = t($message);
        $params['subject'] = t("A New Submission of Find a Partner By ".$username);
        $module = 'b2b_categories';
        $key = 'mail_on_find_partner';
        $language = '';
        if($to_emp != ''){ 
           drupal_mail($module, $key, $to_emp, $language, $params, $from = NULL, $send = TRUE);
           watchdog('Find_a_partner', "Custom mail sent from find a partner ".$type, array(), WATCHDOG_NOTICE);
        }
    
        watchdog('Find_a_partner', "Find a Partner submitted ".$type, array(), WATCHDOG_NOTICE);
    }
}

function b2b_categories_mail ($key, &$message, $params) {
  switch ($key) {
    case 'mail_on_find_partner':
      // Set headers etc
      // Set the mail content type to html to send an html e-mail (optional).
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['to'] = $params['to'];
      $message['subject'] = $params['subject'];
      //$message['body'][] = t('Hello @username,', array('@username' => $params['username']));
      $message['body'][] = $params['message'];
      break;
    
    case 'mail_on_new_user':
      // Set headers etc
      // Set the mail content type to html to send an html e-mail (optional).
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['to'] = $params['to'];
      $message['subject'] = $params['subject'];
      //$message['body'][] = t('Hello @username,', array('@username' => $params['username']));
      $message['body'][] = $params['message'];
      break;
  }
}


